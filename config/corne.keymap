/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&sl {
    ignore-modifiers;

    /delete-property/ quick-release;
};

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <24 30>;
            layers = <1>;
        };

        bt_nxt {
            bindings = <&bt BT_NXT>;
            key-positions = <24 31>;
            layers = <1>;
        };

        bt_prv {
            bindings = <&bt BT_PRV>;
            key-positions = <24 32>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp F                  &kp P  &kp B        &kp J          &kp L         &kp U         &kp Y    &kp SEMI  &kp LBKT
&mt LCTRL ESCAPE  &kp A  &kp R  &kp S                  &kp T  &kp G        &kp M          &kp N         &kp E         &kp I    &kp O     &kp SQT
&sk LSHFT         &kp Z  &kp X  &kp C                  &kp D  &kp V        &kp K          &kp H         &kp COMMA     &kp DOT  &kp FSLH  &kp BACKSLASH
                                &mt LEFT_ALT LEFT_WIN  &sl 1  &kp SPACE    &kp BACKSPACE  &lt 2 RETURN  &kp LEFT_WIN
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp STAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET
&trans     &kp N1    &kp N2  &kp N3    &kp N4      &kp N5         &kp LEFT   &kp DOWN       &kp UP    &kp RIGHT             &kp MINUS              &kp EQUAL
&trans     &kp N6    &kp N7  &kp N8    &kp N9      &kp N0         &none      &none          &none     &none                 &none                  &none
                             &trans    &trans      &trans         &trans     &trans         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &msc SCRL_UP    &mmv MOVE_UP    &mkp MB1         &mkp RCLK  &none     &none   &kp N7  &kp N8  &kp NUMBER_9  &kp NUMBER_0  &kp BACKSPACE
&trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none      &none     &none   &kp N4  &kp N5  &kp N6        &none         &none
&trans     &msc SCRL_DOWN  &msc SCRL_LEFT  &msc SCRL_RIGHT  &none      &none     &none   &kp N1  &kp N2  &kp N3        &none         &none
                                           &trans           &trans     &trans    &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PLAY_PAUSE    &kp C_NEXT  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none    &kp PRINTSCREEN  &kp DELETE
&kp F1  &kp F2      &kp F3        &kp F4        &kp F5      &kp F6              &kp F7      &kp F8                &kp F9                &kp F10  &kp F11          &kp F12
&none   &none       &none         &none         &none       &none               &none       &none                 &none                 &none    &none            &tog 4
                                  &trans        &trans      &trans              &trans      &trans                &trans
            >;
        };

        gaming_layer {
            bindings = <
&kp T  &kp TAB    &kp Q  &kp W    &kp E  &kp R        &kp Y   &kp U   &kp I      &kp O    &kp P     &kp BSPC
&kp G  &kp LSHFT  &kp A  &kp S    &kp D  &kp F        &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp ENTER
&kp B  &kp LCTRL  &kp Z  &kp X    &kp C  &kp V        &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &kp ESC  &mo 5  &kp SPACE    &trans  &trans  &trans
            >;

            label = "gaming";
        };

        gaming_layer_1 {
            bindings = <
&trans  &kp N6  &kp N7  &trans  &kp N8  &kp N9    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp N0    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &trans  &trans  &trans  &trans  &trans  &tog 4
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "gaming1";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
